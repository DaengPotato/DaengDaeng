package com.daengdaeng.domain.pet.service;import com.daengdaeng.domain.pet.domain.Mbti;import com.daengdaeng.domain.pet.domain.MbtiQuestion;import com.daengdaeng.domain.pet.dto.response.MbtiResponse;import com.daengdaeng.domain.pet.dto.response.MbtiTypeResponse;import com.daengdaeng.domain.pet.repository.MbtiQuestionRepository;import com.daengdaeng.domain.pet.repository.MbtiRepository;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.stereotype.Service;import javax.transaction.Transactional;import java.util.List;import java.util.stream.Collectors;@Slf4j@Service@Transactional@RequiredArgsConstructorpublic class MbtiServiceImpl implements MbtiService{    private final MbtiQuestionRepository mbtiQuestionRepository;    private final MbtiRepository mbtiRepository;    @Override    public List<MbtiResponse> findMbtiQuestion() {        List<MbtiQuestion> mbtiQuestionList = mbtiQuestionRepository.findAll();        List<MbtiResponse> mbtiResponseList = mbtiQuestionList.stream()                .map(mbtiQuestion -> {                    return MbtiResponse.builder()                            .questionId(mbtiQuestion.getQuestionId())                            .question(mbtiQuestion.getQuestion())                            .answerA(mbtiQuestion.getAnswerA())                            .answerB(mbtiQuestion.getAnswerB())                            .type(MbtiTypeResponse.builder()                                    .typeA(mbtiQuestion.getMbtiType().getTypeA())                                    .typeB(mbtiQuestion.getMbtiType().getTypeB()).build())                            .build();                })                .collect(Collectors.toList());        return mbtiResponseList;    }    @Override    public Mbti findMbti(String mbti) {        return mbtiRepository.findMbtiByMbti(mbti);    }    /**     * 스프링 시큐리티 인증을 통과하여 저장된 회원의 인증 객체에서 이메일 추출     * @return String : 이메일     */    private String getCurrentEmail() {        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        UserDetails principal = (UserDetails) authentication.getPrincipal();        log.info("principal : {}", principal.getUsername());        return principal.getUsername();    }}